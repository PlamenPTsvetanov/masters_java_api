version: '3.8'
services:
  postgres:
    networks:
      - backend
    image: postgres
    container_name: postgres-db
    restart: on-failure
    environment:
      POSTGRES_USER: run/secrets/db_user
      POSTGRES_PASSWORD: run/secrets/db_password
      POSTGRES_DB: run/secrets/db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    secrets:
      - db
      - db_password
      - db_user


  broker:
    image: apache/kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    networks:
      - backend
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker, controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk

  app:
    networks:
      - backend
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - broker
    image: java_api:v1
    container_name: java-api
    restart: always
    env_file: dockerSecrets/api.env

volumes:
  postgres_data:
secrets:
  db_password:
    file: dockerSecrets/db_password.txt
  db_user:
    file: dockerSecrets/db_user.txt
  db:
    file: dockerSecrets/db.txt
  api_db_url:
    file: dockerSecrets/api.env
networks:
  backend: